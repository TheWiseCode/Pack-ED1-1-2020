// ---------------------------------------------------------------------------

#pragma hdrstop

#include "MatrizPtr.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)

MatrizPtr::MatrizPtr() {
	ptrMat = NULL;
	df = 0;
	dc = 0;
	rep = 0;
}

void MatrizPtr::dimensionar(int f, int c) {
	df = f;
	dc = c;
}

int MatrizPtr::dimension_fila() {
	return df;
}

int MatrizPtr::dimension_columna() {
	return dc;
}

NodoMat* MatrizPtr::existe(int f, int c) {
	// if (f > 0 && f <= df) {
	// if (c > 0 && c <= dc) {
	NodoMat* aux = ptrMat;
	while (aux != NULL) {
		if (aux->fil == f && aux->col == c)
			return aux;
		aux = aux->sig;
	}
	return NULL;
	// }
	// }
}

NodoMat* MatrizPtr::anterior(NodoMat* p) {
	if (nt == 0 || p == ptrMat) {
		return NULL;
	}
	else {
		NodoMat* x = ptrMat;
		NodoMat* ant = NULL;
		while (x != NULL) {
			if (x == p) {
				return ant;
			}
			ant = x;
			x = x->sig;
		}
	}
}

void MatrizPtr::suprime(NodoMat* p) {
	if (nt > 0) {
		if (p == ptrMat) {
			NodoMat* x = ptrMat;
			ptrMat = ptrMat->sig;
			delete(x);
		}
		else {
			NodoMat* ant = anterior(p);
			ant->sig = p->sig;
			delete(p);
		}
	}
}

void MatrizPtr::poner(int f, int c, int valor) {
	if (f > 0 && f <= df && c > 0 && c <= dc) {
		NodoMat* pos = existe(f, c);
		if (pos == NULL && valor != rep) {
			NodoMat* nuevo = new NodoMat;
			nuevo->fil = f;
			nuevo->col = c;
			nuevo->dato = valor;
			nuevo->sig = ptrMat;
			ptrMat = nuevo;
			nt++;
		}
		else {
			if (valor == rep) {
				if (pos == ptrMat) {
					NodoMat* x = ptrMat;
					ptrMat = ptrMat->sig;
					delete(x);
				}
				else {
					NodoMat* x = ptrMat;
					NodoMat* ant = NULL;
					while (x != NULL) {
						if (x == pos) {
							break;
						}
						ant = x;
						x = x->sig;
					}
					ant->sig = pos->sig;
					delete(pos);
				}
				nt--;
			}
			else
				pos->dato = valor;
		}
		return;
	}
	cout << "ERROR DE RANGO\n";
}

int MatrizPtr::elemento(int f, int c) {
	if (f > 0 && f <= df) {
		if (c > 0 && c <= dc) {
			NodoMat* pos = existe(f, c);
			if (pos == NULL)
				return rep;
			else
				return pos->dato;
		}
	}
	cout << "ERROR DE RANGO\n";
}

bool MatrizPtr::esValido(int rep) {
	bool vacio = true;
	bool repetidos = true;
	for (int i = 0; i < df; i++)
		for (int j = 0; j < dc; j++)
			if (elemento(i + 1, j + 1) != rep)
				vacio = false;
	for (int i = 0; i < df; i++)
		for (int j = 0; j < dc; j++)
			if (elemento(i + 1, j + 1) == rep)
				repetidos = false;
	return vacio || repetidos;
}

void MatrizPtr::definir_valor_repetido(int r) {
	bool sinRep = true;
	NodoMat* aux = ptrMat;
	while (aux != NULL) {
		if (aux->dato == r) {
			sinRep = false;
			break;
		}
		aux = aux->sig;
	}
	if (nt == 0 || sinRep) {
		rep = r;
	}
	else {
		for (int i = 0; i < df; i++) {
			for (int j = 0; j < dc; j++) {
				int e = elemento(i + 1, j + 1);
				if (e == rep) {
					NodoMat* nuevo = new NodoMat;
					nuevo->fil = i + 1;
					nuevo->col = j + 1;
					nuevo->dato = e;
					nuevo->sig = ptrMat;
					ptrMat = nuevo;
					nt++;
				}
			}
		}
		NodoMat* aux = ptrMat;
		while (aux != NULL) {
			if (aux->dato == r) {
				NodoMat* sup = aux;
				aux = aux->sig;
				if (sup == ptrMat) {
					NodoMat* x = ptrMat;
					ptrMat = ptrMat->sig;
					delete(x);
				}
				else {
					NodoMat* x = ptrMat;
					NodoMat* ant = NULL;
					while (x != NULL) {
						if (x == sup) {
							break;
						}
						ant = x;
						x = x->sig;
					}
					ant->sig = sup->sig;
					delete(sup);
				}
				nt--;
			}
			else
				aux = aux->sig;
		}
		rep = r;
	}
}

string MatrizPtr::toStr() {
	string r = "";
	for (int i = 0; i < df; i++) {
		r += "|";
		for (int j = 0; j < dc; j++) {
			r += to_string(elemento(i + 1, j + 1));
			if (j < dc - 1)
				r += "	";
		}
		r += "|\n";
	}
	return r;
}

float MatrizPtr::prom_elementos() {
	int ce = df * dc;
	float suma = 0;
	for (int i = 0; i < df; i++) {
		for (int j = 0; j < dc; j++) {
			int e = elemento(i + 1, j + 1);
			suma += e;
		}
	}
	return suma / ce;
}

float MatrizPtr::prom_elementos_validos() {
	int ce = nt;
	float suma = 0;
	NodoMat* aux = ptrMat;
	while (aux != NULL) {
		suma += aux->dato;
		aux = aux->sig;
	}
	return suma / ce;
}
