// ---------------------------------------------------------------------------

#pragma hdrstop

#include "UPoliPtr.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)

PoliPtr::PoliPtr() {
	ptrPoli = NULL;
	nt = 0;
}

bool PoliPtr::es_cero() {
	return nt == 0;
}

NodoPoli* PoliPtr::existe_exponente(int exp) {
	NodoPoli* aux = ptrPoli;
	while (aux != NULL) {
		if (aux->exp == exp)
			return aux;
		aux = aux->sig;
	}
	return NULL;
}

void PoliPtr::poner_termino(double coef, int exp) {
	if (exp < 0)
		return;
	NodoPoli* existe = existe_exponente(exp);
	if (existe == NULL) {
		NodoPoli* aux = new NodoPoli;
		if (aux != NULL) {
			aux->coef = coef; // double = int , int = double
			aux->exp = exp;
			aux->sig = ptrPoli;
			ptrPoli = aux;
			nt++;
		}
		else
			cout << "ERROR ESPACIO MEMORIA\n";
	}
	else {
		existe->coef = existe->coef + coef;
		if (existe->coef == 0) {
			suprime(existe);
			nt--;
		}
	}
}

NodoPoli* PoliPtr::anterior(NodoPoli* p) {
	if (nt == 0) {
	}
	else if (p == ptrPoli) {
		cout << "DIRECCION INCORRECTA\n";
	}
	else {
		NodoPoli* x = ptrPoli;
		NodoPoli* ant = NULL;
		while (x != NULL) {
			if (x == p) {
				return ant;
			}
			ant = x;
			x = x->sig;
		}
	}
}

void PoliPtr::suprime(NodoPoli* p) {
	if (nt == 0) {
		return;
	}
	else if (p == ptrPoli) {
		NodoPoli* x = ptrPoli;
		ptrPoli = ptrPoli->sig;
		delete(x);
	}
	else {
		NodoPoli* ant = anterior(p);
		ant->sig = p->sig;
		delete(p);
	}
}

double PoliPtr::coeficiente(int exp) {
	if (exp >= 0 && exp <= grado()) {
		NodoPoli* aux = ptrPoli;
		while (aux != NULL) {
			if (aux->exp == exp)
				return aux->coef;
			aux = aux->sig;
		}
	}
	cout << "ERROR NO EXISTE EXPONENTE CON ESE TERMINO\n";
}

int PoliPtr::exponente(int nro) {
	if (nro < nt) {
		NodoPoli* aux = ptrPoli;
		int cont = 0;
		while (cont < nro) {
			aux = aux->sig;
			cont++;
		}
		return aux->exp;
	}
	else
		cout << "ERROR DE RANGO\n";
}

int PoliPtr::grado() {
	NodoPoli* aux = ptrPoli;
	int may = aux->exp;
	while (aux != NULL) {
		if (aux->exp > may)
			may = aux->exp;
		aux = aux->sig;
	}
	return may;
}

int PoliPtr::numero_terminos() {
	return nt;
}

PoliPtr* PoliPtr::suma(PoliPtr *otro) {
	PoliPtr *pr = new PoliPtr();
	for (int i = 0; i < nt; i++) {
		int exp1 = this->exponente(i);
		double coef1 = this->coeficiente(exp1);
		pr->poner_termino(coef1, exp1);
	}
	for (int i = 0; i < otro->nt; i++) {
		// poner_termino(p1.coeficiente(p2.exponente(i)), p2.exponente(i))
		int exp2 = otro->exponente(i);
		double coef2 = otro->coeficiente(exp2);
		pr->poner_termino(coef2, exp2);
	}
	return pr;
}

void PoliPtr::sumar(PoliPtr* otro) {
	for (int i = 0; i < otro->numero_terminos(); i++) {
		int exp = otro->exponente(i);
		int coef = otro->coeficiente(exp);
		poner_termino(coef, exp);
	}
}

PoliPtr* PoliPtr::resta(PoliPtr *otro) {
	PoliPtr *pr = new PoliPtr();
	for (int i = 0; i < nt; i++) {
		int exp1 = this->exponente(i);
		double coef1 = this->coeficiente(exp1);
		pr->poner_termino(coef1, exp1);
	}
	for (int i = 0; i < otro->nt; i++) {
		// poner_termino(p1.coeficiente(p2.exponente(i)), p2.exponente(i))
		int exp2 = otro->exponente(i);
		double coef2 = -otro->coeficiente(exp2);
		pr->poner_termino(coef2, exp2);
	}
	return pr;
}

string PoliPtr::toStr() {
	if (nt == 0)
		return "0";
	string ret = "";
	for (int i = 0; i < nt; i++) {
		int exp = this->exponente(i);
		double coef = this->coeficiente(exp);
		string signo;
		if (coef > 0)
			signo = "+";
		else {
			signo = "-";
			coef = coef*-1;
		}
		ret = ret + signo + to_string(coef) + "x^" + to_string(exp);
	}
	return ret;
}

void PoliPtr::derivar() {
	for (int i = 0; i < numero_terminos(); i++) {
		int exp = exponente(i);
		double coef = coeficiente(exp);
		poner_termino(coef*(-1), exp);
		if (exp > 0) {
			poner_termino(coef * exp, exp - 1);
		}
	}
}

void PoliPtr::multiplicar_por_monomio(int coef, int exp) {
	if (exp < 0)
		return;
	PoliPtr* aux = new PoliPtr(); ;
	while (numero_terminos() > 0) {
		int e = exponente(0);
		int c = coeficiente(e);
		poner_termino(c*-1, e);
		aux->poner_termino(coef*c, e + exp);
	}
	for (int i = 0; i < aux->numero_terminos(); i++) {
		int e = aux->exponente(i);
		int c = aux->coeficiente(e);
		poner_termino(c, e);
	}
}

void PoliPtr::multiplicar(PoliPtr *p) {
	int num = p->numero_terminos();
	PoliPtr* polis = new PoliPtr[num];
	for (int i = 0; i < p->numero_terminos(); i++) {
		polis[i] = clon_estatico();
		int e = p->exponente(i);
		int c = p->coeficiente(e);
		polis[i].multiplicar_por_monomio(c, e);
	}
	while (numero_terminos() > 0) {
		int e = exponente(0);
		int c = coeficiente(e);
		poner_termino(c*-1, e);
	}
	for (int i = 0; i < p->numero_terminos() - 1; i++) {
		polis[0].sumar(polis[i + 1].clon_dinamico());
	}
	for (int i = 0; i < polis[0].numero_terminos(); i++) {
		int e = polis[0].exponente(i);
		int c = polis[0].coeficiente(e);
		poner_termino(c, e);
	}

}

PoliPtr PoliPtr::clon_estatico() {
	PoliPtr p;
	for (int i = 0; i < numero_terminos(); i++) {
		int e = exponente(i);
		int c = coeficiente(e);
		p.poner_termino(c, e);
	}
	return p;
}

PoliPtr* PoliPtr::clon_dinamico() {
	PoliPtr *p = new PoliPtr();
	for (int i = 0; i < numero_terminos(); i++) {
		int e = exponente(i);
		int c = coeficiente(e);
		p->poner_termino(c, e);
	}
	return p;
}

PoliPtr* PoliPtr::integral() {
	PoliPtr* integral = new PoliPtr();
	for (int i = 0; i < numero_terminos(); i++) {
		int exp = exponente(i);
		double coef = coeficiente(exp);
		integral->poner_termino(coef*1.0 / (exp + 1), exp + 1);
	}
	return integral;
}

double PoliPtr::evaluar(double x) {
	double sum = 0;
	for (int i = 0; i < numero_terminos(); i++) {
		int exp = exponente(i);
		double coef = coeficiente(exp);
		sum = sum + (coef * pow(x, exp));
	}
	return sum;
}

double PoliPtr::punto_minimo(int a, int b) { // a = 3 y b = 0
	if (b > a) {
		// 1 -> 4
		// x = 1.0 1.1 1.2 1.3 1.4 .... 3.5 3.6 3.7 3.8 3.9 y 4.0
		double x = a;
		double punto_min = evaluar(x); // pm = -8
		while (x <= b) {
			x = x + 0.1;
			double nuevo_ev = evaluar(x);
			if (nuevo_ev < punto_min)
				punto_min = nuevo_ev;
		}
		return punto_min;
	}
	else
		return 0;
}

double PoliPtr::punto_maximo(int a, int b) { // a = 3 y b = 0
	if (b > a) {
		// 1 -> 4
		// x = 1.0 1.1 1.2 1.3 1.4 .... 3.5 3.6 3.7 3.8 3.9 y 4.0
		double x = a;
		double punto_max = evaluar(x); // pm = -8
		while (x <= b) {
			x = x + 0.1;
			double nuevo_ev = evaluar(x);
			if (nuevo_ev > punto_max)
				punto_max = nuevo_ev;
		}
		return punto_max;
	}
	else
		return 0;
}

double PoliPtr::area(int a, int b) {
	PoliPtr* integr = integral();
}
